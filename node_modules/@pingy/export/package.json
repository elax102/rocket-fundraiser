{
  "_args": [
    [
      {
        "raw": "@pingy/export@^4.0.2",
        "scope": "@pingy",
        "escapedName": "@pingy%2fexport",
        "name": "@pingy/export",
        "rawSpec": "^4.0.2",
        "spec": ">=4.0.2 <5.0.0",
        "type": "range"
      },
      "/home/alex/Documents/Learning/rocket/node_modules/@pingy/cli"
    ]
  ],
  "_from": "@pingy/export@>=4.0.2 <5.0.0",
  "_id": "@pingy/export@4.0.2",
  "_inCache": true,
  "_location": "/@pingy/export",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/export-4.0.2.tgz_1494326763235_0.32230390841141343"
  },
  "_npmUser": {
    "name": "davej",
    "email": "dave@davejeffery.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@pingy/export@^4.0.2",
    "scope": "@pingy",
    "escapedName": "@pingy%2fexport",
    "name": "@pingy/export",
    "rawSpec": "^4.0.2",
    "spec": ">=4.0.2 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@pingy/cli"
  ],
  "_resolved": "https://registry.npmjs.org/@pingy/export/-/export-4.0.2.tgz",
  "_shasum": "a0b1b96304ea102f7440f36240b0f0f994b6b321",
  "_shrinkwrap": null,
  "_spec": "@pingy/export@^4.0.2",
  "_where": "/home/alex/Documents/Learning/rocket/node_modules/@pingy/cli",
  "author": {
    "name": "Dave Jeffery",
    "email": "dave@davejeffery.com"
  },
  "bugs": {
    "url": "https://github.com/davej/baconize/issues"
  },
  "dependencies": {
    "@pingy/compile": "^6.1.3",
    "checkdir": "^1.0.0",
    "micromatch": "^2.3.11",
    "mkdirp": "^0.5.1",
    "path-complete-extname": "^0.1.0",
    "readdirp": "2.0.1",
    "rimraf": "^2.5.3",
    "through2": "^2.0.0",
    "when": "^3.7.4"
  },
  "description": "Compile static site for production (with sourcemaps), auto-compiles files like `app.coffee -> app.js`",
  "devDependencies": {
    "babel-core": "^6.14.0",
    "babel-preset-es2015": "^6.14.0",
    "coffee-script": "^1.10.0",
    "jade": "^1.11.0",
    "mocha": "^2.5.3",
    "stylus": "^0.54.5",
    "unexpected": "^10.13.3"
  },
  "directories": {},
  "dist": {
    "shasum": "a0b1b96304ea102f7440f36240b0f0f994b6b321",
    "tarball": "https://registry.npmjs.org/@pingy/export/-/export-4.0.2.tgz"
  },
  "engineStrict": true,
  "engines": {
    "node": ">=6"
  },
  "homepage": "https://github.com/davej/baconize",
  "keywords": [
    "compile",
    "transpile",
    "precompile",
    "coffeescript",
    "jade",
    "stylus",
    "less",
    "sass"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "davej",
      "email": "dave@davejeffery.com"
    }
  ],
  "name": "@pingy/export",
  "optionalDependencies": {},
  "readme": "Baconize\n========\n\n[![npm version](https://badge.fury.io/js/baconize.svg)](https://badge.fury.io/js/baconize)\n[![Build Status](https://travis-ci.org/davej/baconize.svg?branch=master)](https://travis-ci.org/davej/baconize)\n\nCompile/minify static site for production (with sourcemaps), auto-compiles files like `app.coffee -> app.js`.\n\nCurrently supports: `LiveScript`, `babel`, `coco`, `coffee-script`, `dogescript`, `less`, `marked`, `myth`, `jade`, `node-sass`, `stylus`, `swig`. To use any of these you must do `npm install x` as needed (where `x` is the name of the lib), baconize does not install them by default.\n\nExample\n-------\n\n```javascript\nvar baconize = require('baconize');\n\nvar source = '/path/to/input/dir';\nvar target = '/path/to/output/dir';\nbaconize(source, target, [options]).then([successFn],[errorFn]);\n```\n\nHow it works:\n  * Baconize will walk your source directory and process each file in `/path/to/input/dir`:\n  * If it can compile a file then it will compile it and output it to the target directory (with source map).\n  * If it *can't* compile the file then it will simply copy it to the target.\n\nFor example, if you have a coffeescript file in `/path/to/input/dir/my-app/scripts/index.coffee` then it will output the compiled file as `/path/to/output/dir/my-app/scripts/index.js`, and the sourcemap as `/path/to/output/dir/my-app/scripts/index.js.map`.\n\nThis library is designed for use alongside [pingy-in-the-middle](https://github.com/davej/piggy-in-the-middle).\n\n\nOptions\n-------\n\n- **compile** (Boolean, default = true): should baconize try to compile files where possible?\n\n- **sourcemaps** (Boolean, default = true): should baconize copy corresponding sourcemaps and source files for the minified/compiled files?\n\n- **minify** (Boolean, default = false): should baconize minify javascript, css and html files? Will also minify post-compilation files.\n\n- **blacklist** (Array): filter to blacklist files from being compiled or minifed. They will still be copied (without compilation/minifiction) unless they are negated using the `fileFilter` or `directoryFilter` options below. This option is useful for vendor directories (like 'bower_components') which already include the compiled versions of files. See [Filters](#filters) for more.\n\n- **fileFilter** (Array): filter to include/exclude files to be copied to target. See [Filters](#filters) for more.\n\n- **directoryFilter** (Array): filter to include/exclude directories to be copied to target, rules are applied to sub-directories also. Useful for directories like '.git'. See [Filters](#filters) for more.\n\n- **depth** (Number): depth at which to stop recursing even if more subdirectories are found.\n\n- **exclusions** (Object): Instead of `blacklist`, `fileFilter` and `directoryFilter` you can use the new exclusions api, this is undocumented for the moment.\n\n\nFilters\n-------\n\nFilters take an array of glob strings. `fileFilter` and `directoryFilter` can be a whitelist or blacklist, by default they are whitelist but add the `!` character before entries to turn them into a blacklist instead:\n\n* `compileBlacklist: [ 'bower_components/**' ]` copies the raw 'bower_components' directory instead of compiling files within the directory.\n\n* `fileFilter: [ '*.json', '*.js', '*.scss', '*.jade' ]` includes *only* JavaScript, JSON, SCSS and Jade files.\n\n* `directoryFilter: [ '!.git', '!node_modules' ]` includes all directories *except* '.git' and 'node_modules'.\n\nSee [minimatch](https://github.com/isaacs/minimatch) for some examples of glob strings.\n\n\nEvents\n------\n\nYou can listen to `chdir` and `compile-start` and `compile-finised` events emitted by baconize.\n```javascript\nvar bacon = baconize(source, target, [options]);\n\nbacon.on('chdir', function(folder) {\n  // `folder` (string) is the current folder path that is being processed by baconize\n});\n\nbacon.on('compile-start', function(file) {\n  // compile has started on `file` (object).\n  //\n  // {\n  //    name: 'typography.css',\n  //    path: 'styles/typography.css',\n  //    fullPath: '/Users/dave/Sites/my-site/styles/typography.css',\n  //    parentDir: 'styles',\n  //    fullParentDir: '/Users/dave/Sites/my-site/styles/',\n  //    stat: {object} See: https://nodejs.org/api/fs.html#fs_class_fs_stats\n  // }\n});\n\nbacon.on('compile-done', function(file) {\n  // compile has finished successfully on `file` (object, see above).\n});\n```\n\nAborting while in progress\n--------------------------\n\nYou can abort baconize while it's in progress.\nIf you do this then the promise will reject and the output directory will be removed.\n\n```javascript\nvar bacon = baconize(source, target, [options]);\n\n// abort baconize while in progress\nsetTimeout(function() { bacon.abort(); }, 10);\n\nbacon.then(function(){}, function(err) {\n  // err (Error)\n  // {\n  //    message: 'Manually aborted by user',\n  //    code: 'ABORT'\n  // }\n})\n```\n\nTry it out\n----------\nThe easiest way to try this out is to `clone` the repo, `cd` into it and do:\n\n```sh\nnpm install\nnpm run example\n```\n\nThis will compile a basic demo site to `examples/output`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davej/baconize.git"
  },
  "scripts": {
    "example": "node examples/compile-site.js",
    "test": "mocha --timeout 15000"
  },
  "version": "4.0.2"
}
